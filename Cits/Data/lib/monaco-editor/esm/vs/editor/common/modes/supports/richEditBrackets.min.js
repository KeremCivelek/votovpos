/**
 * Minified by jsDelivr using Terser v5.7.1.
 * Original file: /npm/monaco-editor@0.27.0/esm/vs/editor/common/modes/supports/richEditBrackets.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import*as strings from"../../../../base/common/strings.js";import*as stringBuilder from"../../core/stringBuilder.js";import{Range}from"../../core/range.js";export class RichEditBracket{constructor(e,t,r,n,s,o){this._richEditBracketBrand=void 0,this.languageIdentifier=e,this.index=t,this.open=r,this.close=n,this.forwardRegex=s,this.reversedRegex=o,this._openSet=RichEditBracket._toSet(this.open),this._closeSet=RichEditBracket._toSet(this.close)}isOpen(e){return this._openSet.has(e)}isClose(e){return this._closeSet.has(e)}static _toSet(e){const t=new Set;for(const r of e)t.add(r);return t}}function groupFuzzyBrackets(e){const t=e.length;e=e.map((e=>[e[0].toLowerCase(),e[1].toLowerCase()]));const r=[];for(let e=0;e<t;e++)r[e]=e;const n=(e,t)=>{const[r,n]=e,[s,o]=t;return r===s||r===o||n===s||n===o},s=(e,n)=>{const s=Math.min(e,n),o=Math.max(e,n);for(let e=0;e<t;e++)r[e]===o&&(r[e]=s)};for(let o=0;o<t;o++){const c=e[o];for(let i=o+1;i<t;i++){n(c,e[i])&&s(r[o],r[i])}}const o=[];for(let n=0;n<t;n++){let s=[],c=[];for(let o=0;o<t;o++)if(r[o]===n){const[t,r]=e[o];s.push(t),c.push(r)}s.length>0&&o.push({open:s,close:c})}return o}export class RichEditBrackets{constructor(e,t){this._richEditBracketsBrand=void 0;const r=groupFuzzyBrackets(t);this.brackets=r.map(((t,n)=>new RichEditBracket(e,n,t.open,t.close,getRegexForBracketPair(t.open,t.close,r,n),getReversedRegexForBracketPair(t.open,t.close,r,n)))),this.forwardRegex=getRegexForBrackets(this.brackets),this.reversedRegex=getReversedRegexForBrackets(this.brackets),this.textIsBracket={},this.textIsOpenBracket={},this.maxBracketLength=0;for(const e of this.brackets){for(const t of e.open)this.textIsBracket[t]=e,this.textIsOpenBracket[t]=!0,this.maxBracketLength=Math.max(this.maxBracketLength,t.length);for(const t of e.close)this.textIsBracket[t]=e,this.textIsOpenBracket[t]=!1,this.maxBracketLength=Math.max(this.maxBracketLength,t.length)}}}function collectSuperstrings(e,t,r,n){for(let s=0,o=t.length;s<o;s++){if(s===r)continue;const o=t[s];for(const t of o.open)t.indexOf(e)>=0&&n.push(t);for(const t of o.close)t.indexOf(e)>=0&&n.push(t)}}function lengthcmp(e,t){return e.length-t.length}function unique(e){if(e.length<=1)return e;const t=[],r=new Set;for(const n of e)r.has(n)||(t.push(n),r.add(n));return t}function getRegexForBracketPair(e,t,r,n){let s=[];s=s.concat(e),s=s.concat(t);for(let e=0,t=s.length;e<t;e++)collectSuperstrings(s[e],r,n,s);return s=unique(s),s.sort(lengthcmp),s.reverse(),createBracketOrRegExp(s)}function getReversedRegexForBracketPair(e,t,r,n){let s=[];s=s.concat(e),s=s.concat(t);for(let e=0,t=s.length;e<t;e++)collectSuperstrings(s[e],r,n,s);return s=unique(s),s.sort(lengthcmp),s.reverse(),createBracketOrRegExp(s.map(toReversedString))}function getRegexForBrackets(e){let t=[];for(const r of e){for(const e of r.open)t.push(e);for(const e of r.close)t.push(e)}return t=unique(t),createBracketOrRegExp(t)}function getReversedRegexForBrackets(e){let t=[];for(const r of e){for(const e of r.open)t.push(e);for(const e of r.close)t.push(e)}return t=unique(t),createBracketOrRegExp(t.map(toReversedString))}function prepareBracketForRegExp(e){const t=/^[\w ]+$/.test(e);return e=strings.escapeRegExpCharacters(e),t?`\\b${e}\\b`:e}function createBracketOrRegExp(e){let t=`(${e.map(prepareBracketForRegExp).join(")|(")})`;return strings.createRegExp(t,!0)}const toReversedString=function(){let e=null,t=null;return function(r){return e!==r&&(e=r,t=function(e){if(stringBuilder.hasTextDecoder){const t=new Uint16Array(e.length);let r=0;for(let n=e.length-1;n>=0;n--)t[r++]=e.charCodeAt(n);return stringBuilder.getPlatformTextDecoder().decode(t)}{let t=[],r=0;for(let n=e.length-1;n>=0;n--)t[r++]=e.charAt(n);return t.join("")}}(e)),t}}();export class BracketsUtils{static _findPrevBracketInText(e,t,r,n){let s=r.match(e);if(!s)return null;let o=r.length-(s.index||0),c=s[0].length,i=n+o;return new Range(t,i-c+1,t,i+1)}static findPrevBracketInRange(e,t,r,n,s){const o=toReversedString(r).substring(r.length-s,r.length-n);return this._findPrevBracketInText(e,t,o,n)}static findNextBracketInText(e,t,r,n){let s=r.match(e);if(!s)return null;let o=s.index||0,c=s[0].length;if(0===c)return null;let i=n+o;return new Range(t,i+1,t,i+1+c)}static findNextBracketInRange(e,t,r,n,s){const o=r.substring(n,s);return this.findNextBracketInText(e,t,o,n)}}
//# sourceMappingURL=/sm/262a442fc14175379d2c833bff19f4354fd16249b37f6eea148a139b615dc142.map