/**
 * Minified by jsDelivr using Terser v5.7.1.
 * Original file: /npm/monaco-editor@0.27.0/esm/vs/editor/contrib/folding/indentRangeProvider.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{FoldingRegions,MAX_LINE_NUMBER}from"./foldingRanges.js";import{TextModel}from"../../common/model/textModel.js";import{LanguageConfigurationRegistry}from"../../common/modes/languageConfigurationRegistry.js";const MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT=5e3;export const ID_INDENT_PROVIDER="indent";export class IndentRangeProvider{constructor(e){this.editorModel=e,this.id="indent"}dispose(){}compute(e){let t=LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageIdentifier().id),n=t&&!!t.offSide,i=t&&t.markers;return Promise.resolve(computeRanges(this.editorModel,n,i))}}export class RangesCollector{constructor(e){this._startIndexes=[],this._endIndexes=[],this._indentOccurrences=[],this._length=0,this._foldingRangesLimit=e}insertFirst(e,t,n){if(e>MAX_LINE_NUMBER||t>MAX_LINE_NUMBER)return;let i=this._length;this._startIndexes[i]=e,this._endIndexes[i]=t,this._length++,n<1e3&&(this._indentOccurrences[n]=(this._indentOccurrences[n]||0)+1)}toIndentRanges(e){if(this._length<=this._foldingRangesLimit){let e=new Uint32Array(this._length),t=new Uint32Array(this._length);for(let n=this._length-1,i=0;n>=0;n--,i++)e[i]=this._startIndexes[n],t[i]=this._endIndexes[n];return new FoldingRegions(e,t)}{let t=0,n=this._indentOccurrences.length;for(let e=0;e<this._indentOccurrences.length;e++){let i=this._indentOccurrences[e];if(i){if(i+t>this._foldingRangesLimit){n=e;break}t+=i}}const i=e.getOptions().tabSize;let s=new Uint32Array(this._foldingRangesLimit),o=new Uint32Array(this._foldingRangesLimit);for(let r=this._length-1,d=0;r>=0;r--){let l=this._startIndexes[r],g=e.getLineContent(l),h=TextModel.computeIndentLevel(g,i);(h<n||h===n&&t++<this._foldingRangesLimit)&&(s[d]=l,o[d]=this._endIndexes[r],d++)}return new FoldingRegions(s,o)}}}export function computeRanges(e,t,n,i=5e3){const s=e.getOptions().tabSize;let o,r=new RangesCollector(i);n&&(o=new RegExp(`(${n.start.source})|(?:${n.end.source})`));let d=[],l=e.getLineCount()+1;d.push({indent:-1,endAbove:l,line:l});for(let n=e.getLineCount();n>0;n--){let i,l=e.getLineContent(n),g=TextModel.computeIndentLevel(l,s),h=d[d.length-1];if(-1!==g){if(o&&(i=l.match(o))){if(!i[1]){d.push({indent:-2,endAbove:n,line:n});continue}{let e=d.length-1;for(;e>0&&-2!==d[e].indent;)e--;if(e>0){d.length=e+1,h=d[e],r.insertFirst(n,h.line,g),h.line=n,h.indent=g,h.endAbove=n;continue}}}if(h.indent>g){do{d.pop(),h=d[d.length-1]}while(h.indent>g);let e=h.endAbove-1;e-n>=1&&r.insertFirst(n,e,g)}h.indent===g?h.endAbove=n:d.push({indent:g,endAbove:n,line:n})}else t&&(h.endAbove=n)}return r.toIndentRanges(e)}
//# sourceMappingURL=/sm/3d7b641225c88f6fde2fd75d3ca4834e380f89f2b1f498bc12c5c910894b8628.map