/**
 * Minified by jsDelivr using Terser v5.7.1.
 * Original file: /npm/monaco-editor@0.27.0/esm/vs/editor/contrib/comment/lineCommentCommand.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import*as strings from"../../../base/common/strings.js";import{EditOperation}from"../../common/core/editOperation.js";import{Position}from"../../common/core/position.js";import{Range}from"../../common/core/range.js";import{Selection}from"../../common/core/selection.js";import{LanguageConfigurationRegistry}from"../../common/modes/languageConfigurationRegistry.js";import{BlockCommentCommand}from"./blockCommentCommand.js";export class LineCommentCommand{constructor(e,t,n,o,i,m){this._selection=e,this._tabSize=t,this._type=n,this._insertSpace=o,this._selectionId=null,this._deltaColumn=0,this._moveEndPositionDown=!1,this._ignoreEmptyLines=i,this._ignoreFirstLine=m||!1}static _gatherPreflightCommentStrings(e,t,n){e.tokenizeIfCheap(t);const o=e.getLanguageIdAtPosition(t,1),i=LanguageConfigurationRegistry.getComments(o),m=i?i.lineCommentToken:null;if(!m)return null;let r=[];for(let e=0,o=n-t+1;e<o;e++)r[e]={ignore:!1,commentStr:m,commentStrOffset:0,commentStrLength:m.length};return r}static _analyzeLines(e,t,n,o,i,m,r){let s,a=!0;s=0===e||1!==e;for(let l=0,c=o.length;l<c;l++){const c=o[l],g=i+l;if(g===i&&r){c.ignore=!0;continue}const u=n.getLineContent(g),C=strings.firstNonWhitespaceIndex(u);if(-1!==C){if(a=!1,c.ignore=!1,c.commentStrOffset=C,s&&!BlockCommentCommand._haystackHasNeedleAtOffset(u,c.commentStr,C)&&(0===e?s=!1:1===e||(c.ignore=!0)),s&&t){const e=C+c.commentStrLength;e<u.length&&32===u.charCodeAt(e)&&(c.commentStrLength+=1)}}else c.ignore=m,c.commentStrOffset=u.length}if(0===e&&a){s=!1;for(let e=0,t=o.length;e<t;e++)o[e].ignore=!1}return{supported:!0,shouldRemoveComments:s,lines:o}}static _gatherPreflightData(e,t,n,o,i,m,r){const s=LineCommentCommand._gatherPreflightCommentStrings(n,o,i);return null===s?{supported:!1}:LineCommentCommand._analyzeLines(e,t,n,s,o,m,r)}_executeLineComments(e,t,n,o){let i;n.shouldRemoveComments?i=LineCommentCommand._createRemoveLineCommentsOperations(n.lines,o.startLineNumber):(LineCommentCommand._normalizeInsertionPoint(e,n.lines,o.startLineNumber,this._tabSize),i=this._createAddLineCommentsOperations(n.lines,o.startLineNumber));const m=new Position(o.positionLineNumber,o.positionColumn);for(let n=0,o=i.length;n<o;n++)if(t.addEditOperation(i[n].range,i[n].text),Range.isEmpty(i[n].range)&&Range.getStartPosition(i[n].range).equals(m)){e.getLineContent(m.lineNumber).length+1===m.column&&(this._deltaColumn=(i[n].text||"").length)}this._selectionId=t.trackSelection(o)}_attemptRemoveBlockComment(e,t,n,o){let i=t.startLineNumber,m=t.endLineNumber,r=o.length+Math.max(e.getLineFirstNonWhitespaceColumn(t.startLineNumber),t.startColumn),s=e.getLineContent(i).lastIndexOf(n,r-1),a=e.getLineContent(m).indexOf(o,t.endColumn-1-n.length);return-1!==s&&-1===a&&(a=e.getLineContent(i).indexOf(o,s+n.length),m=i),-1===s&&-1!==a&&(s=e.getLineContent(m).lastIndexOf(n,a),i=m),!t.isEmpty()||-1!==s&&-1!==a||(s=e.getLineContent(i).indexOf(n),-1!==s&&(a=e.getLineContent(i).indexOf(o,s+n.length))),-1!==s&&32===e.getLineContent(i).charCodeAt(s+n.length)&&(n+=" "),-1!==a&&32===e.getLineContent(m).charCodeAt(a-1)&&(o=" "+o,a-=1),-1!==s&&-1!==a?BlockCommentCommand._createRemoveBlockCommentOperations(new Range(i,s+n.length+1,m,a+1),n,o):null}_executeBlockComment(e,t,n){e.tokenizeIfCheap(n.startLineNumber);let o=e.getLanguageIdAtPosition(n.startLineNumber,1),i=LanguageConfigurationRegistry.getComments(o);if(!i||!i.blockCommentStartToken||!i.blockCommentEndToken)return;const m=i.blockCommentStartToken,r=i.blockCommentEndToken;let s=this._attemptRemoveBlockComment(e,n,m,r);if(!s){if(n.isEmpty()){const t=e.getLineContent(n.startLineNumber);let o=strings.firstNonWhitespaceIndex(t);-1===o&&(o=t.length),s=BlockCommentCommand._createAddBlockCommentOperations(new Range(n.startLineNumber,o+1,n.startLineNumber,t.length+1),m,r,this._insertSpace)}else s=BlockCommentCommand._createAddBlockCommentOperations(new Range(n.startLineNumber,e.getLineFirstNonWhitespaceColumn(n.startLineNumber),n.endLineNumber,e.getLineMaxColumn(n.endLineNumber)),m,r,this._insertSpace);1===s.length&&(this._deltaColumn=m.length+1)}this._selectionId=t.trackSelection(n);for(const e of s)t.addEditOperation(e.range,e.text)}getEditOperations(e,t){let n=this._selection;if(this._moveEndPositionDown=!1,n.startLineNumber===n.endLineNumber&&this._ignoreFirstLine)return t.addEditOperation(new Range(n.startLineNumber,e.getLineMaxColumn(n.startLineNumber),n.startLineNumber+1,1),n.startLineNumber===e.getLineCount()?"":"\n"),void(this._selectionId=t.trackSelection(n));n.startLineNumber<n.endLineNumber&&1===n.endColumn&&(this._moveEndPositionDown=!0,n=n.setEndPosition(n.endLineNumber-1,e.getLineMaxColumn(n.endLineNumber-1)));const o=LineCommentCommand._gatherPreflightData(this._type,this._insertSpace,e,n.startLineNumber,n.endLineNumber,this._ignoreEmptyLines,this._ignoreFirstLine);return o.supported?this._executeLineComments(e,t,o,n):this._executeBlockComment(e,t,n)}computeCursorState(e,t){let n=t.getTrackedSelection(this._selectionId);return this._moveEndPositionDown&&(n=n.setEndPosition(n.endLineNumber+1,1)),new Selection(n.selectionStartLineNumber,n.selectionStartColumn+this._deltaColumn,n.positionLineNumber,n.positionColumn+this._deltaColumn)}static _createRemoveLineCommentsOperations(e,t){let n=[];for(let o=0,i=e.length;o<i;o++){const i=e[o];i.ignore||n.push(EditOperation.delete(new Range(t+o,i.commentStrOffset+1,t+o,i.commentStrOffset+i.commentStrLength+1)))}return n}_createAddLineCommentsOperations(e,t){let n=[];const o=this._insertSpace?" ":"";for(let i=0,m=e.length;i<m;i++){const m=e[i];m.ignore||n.push(EditOperation.insert(new Position(t+i,m.commentStrOffset+1),m.commentStr+o))}return n}static nextVisibleColumn(e,t,n,o){return n?e+(t-e%t):e+o}static _normalizeInsertionPoint(e,t,n,o){let i,m,r=1073741824;for(let i=0,m=t.length;i<m;i++){if(t[i].ignore)continue;const m=e.getLineContent(n+i);let s=0;for(let e=0,n=t[i].commentStrOffset;s<r&&e<n;e++)s=LineCommentCommand.nextVisibleColumn(s,o,9===m.charCodeAt(e),1);s<r&&(r=s)}r=Math.floor(r/o)*o;for(let s=0,a=t.length;s<a;s++){if(t[s].ignore)continue;const a=e.getLineContent(n+s);let l=0;for(i=0,m=t[s].commentStrOffset;l<r&&i<m;i++)l=LineCommentCommand.nextVisibleColumn(l,o,9===a.charCodeAt(i),1);t[s].commentStrOffset=l>r?i-1:i}}}
//# sourceMappingURL=/sm/0f570a819f30bf3b55a666b40abc8a800810231395e3c88bba8549cd01785ee3.map