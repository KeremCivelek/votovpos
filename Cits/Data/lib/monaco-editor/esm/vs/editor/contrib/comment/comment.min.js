/**
 * Minified by jsDelivr using Terser v5.7.1.
 * Original file: /npm/monaco-editor@0.27.0/esm/vs/editor/contrib/comment/comment.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import*as nls from"../../../nls.js";import{KeyChord}from"../../../base/common/keyCodes.js";import{EditorAction,registerEditorAction}from"../../browser/editorExtensions.js";import{Range}from"../../common/core/range.js";import{EditorContextKeys}from"../../common/editorContextKeys.js";import{BlockCommentCommand}from"./blockCommentCommand.js";import{LineCommentCommand}from"./lineCommentCommand.js";import{MenuId}from"../../../platform/actions/common/actions.js";class CommentLineAction extends EditorAction{constructor(e,o){super(o),this._type=e}run(e,o){if(!o.hasModel())return;const t=[],n=o.getModel().getOptions(),i=o.getOption(17),m=o.getSelections().map(((e,o)=>({selection:e,index:o,ignoreFirstLine:!1})));m.sort(((e,o)=>Range.compareRangesUsingStarts(e.selection,o.selection)));let r=m[0];for(let e=1;e<m.length;e++){const o=m[e];r.selection.endLineNumber===o.selection.startLineNumber&&(r.index<o.index?o.ignoreFirstLine=!0:(r.ignoreFirstLine=!0,r=o))}for(const e of m)t.push(new LineCommentCommand(e.selection,n.tabSize,this._type,i.insertSpace,i.ignoreEmptyLines,e.ignoreFirstLine));o.pushUndoStop(),o.executeCommands(this.id,t),o.pushUndoStop()}}class ToggleCommentLineAction extends CommentLineAction{constructor(){super(0,{id:"editor.action.commentLine",label:nls.localize("comment.line","Toggle Line Comment"),alias:"Toggle Line Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2133,weight:100},menuOpts:{menuId:MenuId.MenubarEditMenu,group:"5_insert",title:nls.localize({key:"miToggleLineComment",comment:["&& denotes a mnemonic"]},"&&Toggle Line Comment"),order:1}})}}class AddLineCommentAction extends CommentLineAction{constructor(){super(1,{id:"editor.action.addCommentLine",label:nls.localize("comment.line.add","Add Line Comment"),alias:"Add Line Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:KeyChord(2089,2081),weight:100}})}}class RemoveLineCommentAction extends CommentLineAction{constructor(){super(2,{id:"editor.action.removeCommentLine",label:nls.localize("comment.line.remove","Remove Line Comment"),alias:"Remove Line Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:KeyChord(2089,2099),weight:100}})}}class BlockCommentAction extends EditorAction{constructor(){super({id:"editor.action.blockComment",label:nls.localize("comment.block","Toggle Block Comment"),alias:"Toggle Block Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:1567,linux:{primary:3103},weight:100},menuOpts:{menuId:MenuId.MenubarEditMenu,group:"5_insert",title:nls.localize({key:"miToggleBlockComment",comment:["&& denotes a mnemonic"]},"Toggle &&Block Comment"),order:2}})}run(e,o){if(!o.hasModel())return;const t=o.getOption(17),n=[],i=o.getSelections();for(const e of i)n.push(new BlockCommentCommand(e,t.insertSpace));o.pushUndoStop(),o.executeCommands(this.id,n),o.pushUndoStop()}}registerEditorAction(ToggleCommentLineAction),registerEditorAction(AddLineCommentAction),registerEditorAction(RemoveLineCommentAction),registerEditorAction(BlockCommentAction);
//# sourceMappingURL=/sm/13539f9a6e3b5446d040bcca57a2f2f4a61929452e28cfb264755bd598af55d7.map